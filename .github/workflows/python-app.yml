# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python Unit tests with Selenium

on:
  workflow_dispatch:
    inputs:
      task_run:
        description: 'Tasks to run'
        required: true
        default: 'Login'
      generate_report:
        description: 'Publish report'
        required: false

  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on:  ubuntu-latest # windows-latest
    # ubuntu-latest - ERASE pywin32==304 from requirements.txt

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -r requirements.txt
    #- name: Lint with flake8
      #run: |
        # stop the build if there are Python syntax errors or undefined names
        #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Create .env file
      uses: iamsauravsharma/create-dotenv@v1.2.1
      with:
        file-name: '.env'
      env:
        REAL_USERNAME: ${{secrets.REAL_USERNAME}}
        REAL_PASSWORD: ${{secrets.REAL_PASSWORD}}
        FAKE_USERNAME: ${{secrets.FAKE_USERNAME}}
        FAKE_PASSWORD: ${{secrets.FAKE_PASSWORD}}
    - if: github.event.inputs.task_run == 'login'
      name: Login tests with unittest
      run: |
        python -m unittest tests/e2e/unittest/login-test.py
    - if: github.event.inputs.task_run == 'projects'
      name: Project tests with unittest
      run: |
        python -m unittest tests/e2e/unittest/project-test.py
    - if: github.event.inputs.task_run == 'sections'
      name: Section tests with unittest
      run: |
        python -m unittest tests/e2e/unittest/section-test.py
    - if: github.event.inputs.task_run == 'tasks'
      name: Task tests with unittest
      run: |
        python -m unittest tests/e2e/unittest/task-test.py
